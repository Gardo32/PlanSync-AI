{
  "name": "ssue Tracker Gateway",
  "nodes": [
    {
      "parameters": {
        "owner": {
          "__rl": true,
          "value": "gardo32",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "PlanSync-AI",
          "mode": "name"
        },
        "events": [
          "issues"
        ],
        "options": {}
      },
      "type": "n8n-nodes-base.githubTrigger",
      "typeVersion": 1,
      "position": [
        -300,
        -100
      ],
      "id": "5ecaf484-cd19-441d-b0c1-32062e1a7dac",
      "name": "Github Trigger",
      "webhookId": "96b40511-460c-47c9-b61d-18af2796b95a",
      "credentials": {
        "githubApi": {
          "id": "UBknuuPCRBeG2Yfw",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Analyze the GitHub issue webhook payload below and create a Trello card with these fields:\n\n    Name: A short, clear title for the card (based on the issue title).\n\n    Description: A full summary including the repository name, the issue body, and the issue URL.\n\nGitHub issue payload:\n{{ $json.data }}",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "You are an AI agent that processes GitHub issue webhook payloads and converts them into Trello card JSONs.   Your goals: 1. Analyze the issue JSON data. 2. Create a concise summary (title and description). 3. Generate a valid Trello card JSON containing:    - `name`: Clean, readable title.    - `desc`: Summary including issue body, repo name, and URL.    - `labels`: Based on GitHub labels (convert to Trello format).    - `urlSource`: Link to the original GitHub issue.  Rules: - If the issue body is empty, generate a short placeholder description. - Always include the GitHub issue URL. - Ensure the output is strictly valid JSON."
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        160,
        -100
      ],
      "id": "7581d19c-3693-41d1-a3d4-cf370176b324",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        140,
        120
      ],
      "id": "27443402-695e-4d7a-bb5a-acbfc1de76c6",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "02L2CJEV8D6cSwqt",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "listId": "={{ $json.output[0].listID }}",
        "name": "={{ $json.output[0].name }}",
        "description": "={{ $json.output[0].desc }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.trello",
      "typeVersion": 1,
      "position": [
        840,
        -100
      ],
      "id": "37ac45d2-7a46-4e7d-b9e1-11b728efb976",
      "name": "Create a card",
      "credentials": {
        "trelloApi": {
          "id": "JeWOWtn96v4fzP96",
          "name": "Trello account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const LIST_ID = 'YOUR-LIST-ID';\n\nfor (const item of items) {\n  if (item.json.output && Array.isArray(item.json.output)) {\n    item.json.output = item.json.output.map(obj => {\n      return {\n        ...obj,\n        listID: LIST_ID,\n      };\n    });\n  }\n}\n\nreturn items;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        620,
        -100
      ],
      "id": "11e75e55-24b9-46a6-b5eb-ba89ca12eee5",
      "name": "Merge Variables"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\n\n// Collect and stringify all JSON entries\nconst flatArray = items.map(item => item.json);\nconst stringifiedData = JSON.stringify(flatArray, null, 2); // Pretty format\n\nreturn [\n  {\n    json: {\n      data: stringifiedData\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -80,
        -100
      ],
      "id": "a3f8352a-c7ae-4018-875e-c471c14c9e0b",
      "name": "Data Aggregation"
    },
    {
      "parameters": {
        "jsonSchemaExample": "[\n  {\n    \"name\": \"f\",\n    \"desc\": \"\",\n    \"labels\": [\n      \"\"\n    ],\n    \"urlSource\": \"\"\n  }\n]",
        "autoFix": true,
        "customizeRetryPrompt": true,
        "prompt": "Instructions:\n--------------\n{instructions}\n--------------\nCompletion:\n--------------\n{completion}\n--------------\n\nAbove, the Completion did not satisfy the constraints given in the Instructions.\n\nError:\n--------------\n{error}\n--------------\n\nThe Completion is still wrapped inside a markdown-style ```json block as a string instead of returning a clean JSON array of objects.\n\nPlease try again. Please respond ONLY with a clean JSON array of objects matching the structure described in the Instructions, without any markdown formatting, code blocks, or extra escaping.\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        260,
        122.5
      ],
      "id": "6d767cf3-8fd8-430d-9eb6-11585364ad26",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash-lite",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        340,
        320
      ],
      "id": "3f2b9168-c38f-44eb-97da-6dabbf640a2a",
      "name": "Google Gemini Chat Model1",
      "credentials": {
        "googlePalmApi": {
          "id": "02L2CJEV8D6cSwqt",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Github Trigger": {
      "main": [
        [
          {
            "node": "Data Aggregation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Merge Variables",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Merge Variables": {
      "main": [
        [
          {
            "node": "Create a card",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Data Aggregation": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "e0b120f4-1dd0-4f81-8de1-d5cef2a0d77d",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "83f2672e288cb1587c5ac570ad12800d41935f247667f0e6b0b6307b4db77fff"
  },
  "id": "SFeV3TgFjFK1YhXS",
  "tags": []
}